{
  "file_paths": {
    "summary_output": ".claude/.semantic_outline_verbose.json",
    "env_file_relative_path": ".env",
    "agents_dir_relative_path": ".claude/agents"
  },
  "file_extensions": {
    "python": ".py",
    "json": ".json",
    "markdown": ".md",
    "text": ".txt"
  },
  "environment_variables": {
    "openrouter_api_key": "OPENROUTER_API_KEY"
  },
  "api": {
    "gemini_model": "google/gemini-2.5-flash:online",
    "endpoint": "https://openrouter.ai/api/v1/chat/completions"
  },
  "text_limits": {
    "description_truncate_length": 100,
    "max_json_keys_display": 10,
    "truncate_suffix": "..."
  },
  "git_commands": {
    "list_files": ["git", "ls-files"]
  },
  "yaml_frontmatter": {
    "delimiter": "---",
    "name_key": "name:",
    "description_key": "description:",
    "model_key": "model:"
  },
  "mcp_servers": [
    {
      "name": "mcp__filesystem",
      "description": "Filesystem interaction and management - read, write, edit files, manage directories"
    },
    {
      "name": "mcp__serena",
      "description": "Code intelligence and symbolic manipulation - analyze code structure, find/replace symbols, manage project memory"
    },
    {
      "name": "mcp__ide",
      "description": "IDE interactions - get diagnostics, execute code in Jupyter"
    },
    {
      "name": "mcp__github",
      "description": "GitHub repository management - create/update files, manage issues, PRs, search repos"
    },
    {
      "name": "mcp__tavily-remote",
      "description": "Web search and content extraction - search web, extract page content, crawl sites"
    },
    {
      "name": "mcp__zen",
      "description": "AI model interactions - chat, debug, analyze, refactor, test generation, and other specialized AI workflows"
    }
  ],
  "http_headers": {
    "content_type": "application/json",
    "authorization_prefix": "Bearer "
  },
  "json_structure": {
    "hook_event_name": "UserPromptSubmit",
    "hook_specific_output_key": "hookSpecificOutput",
    "additional_context_key": "additionalContext",
    "decision_key": "decision",
    "reason_key": "reason",
    "block_decision": "block"
  },
  "file_encoding": {
    "default": "utf-8",
    "error_handling": "ignore"
  },
  "json_formatting": {
    "indent": 2
  },
  "response_template": {
    "context_prefix": "Context analysis for your request:\n\n",
    "gemini_failure_prefix": "Gemini request failed: "
  },
  "file_summary": {
    "unreadable_python": "Unreadable or invalid Python file",
    "unreadable_text": "Unreadable text file",
    "unreadable_json": "Unreadable JSON file",
    "empty_text": "Empty text file",
    "json_config": "JSON config",
    "json_non_dict": "JSON array or non-dict structure",
    "skipped_file_prefix": "Skipped unhandled file: ",
    "classes_functions_template": "Defines {classes_count} classes and {functions_count} functions",
    "module_level_fallback": "Module-level logic or config"
  },
  "gemini_prompt_template": {
    "user_prompt_header": "User Prompt:",
    "outline_header": "# Project Semantic Outline",
    "mcp_tools_header": "\n# Available MCP Tools\n",
    "agents_header": "\n# Available Agents\n",
    "analysis_request": "Analyze the user prompt and provide:",
    "relevant_files_section": "1. **Relevant Files**: List files relevant to this prompt in format:\n   filename: reason",
    "mcp_tools_section": "2. **MUST USE MCP Tools**: Based on the user's request, recommend specific MCP tools that would be most helpful:\n   - tool_name: why this tool is relevant to the task",
    "agents_section": "3. **MUST USE Agents**: Based on the user's request, recommend specific agents that would be most helpful:\n   - agent_name: why this agent is relevant to the task",
    "format_header": "Format your response as:",
    "relevant_files_format": "## Relevant Files\nfilename: reason",
    "mcp_tools_format": "## MUST USE MCP Tools  \ntool_name: explanation of relevance",
    "agents_format": "## MUST USE Agents\nagent_name: explanation of relevance"
  },
  "post_tool_use": {
    "severity_config": {
      "critical": {
        "frequency": 1,
        "bypass_rate_limit": true
      },
      "high": {
        "frequency": 2,
        "bypass_rate_limit": false
      },
      "medium": {
        "frequency_with_continuation": 3,
        "frequency_without_continuation": 5,
        "bypass_rate_limit": false
      },
      "low": {
        "frequency": 7,
        "bypass_rate_limit": false
      }
    },
    "thresholds": {
      "error_count_critical": 3,
      "error_count_medium": 2,
      "multi_edit_high_complexity": 5,
      "multi_edit_medium_complexity": 3,
      "test_coverage_threshold": 0.3,
      "performance_risk_score_high": 30,
      "performance_risk_score_medium": 15,
      "recommendation_count_limit": 3,
      "memory_relevance_threshold": 0.6,
      "memory_search_limit": 3,
      "context_tags_limit": 15,
      "agent_recommendations_limit": 5,
      "complexity_risk_cap": 1.0,
      "relevance_score_cap": 1.0,
      "risk_score_cap": 1.0,
      "recommendation_confidence_cap": 1.0
    },
    "rate_limiting": {
      "anti_pattern_critical_max_requests": 1,
      "anti_pattern_critical_window_seconds": 30,
      "performance_hotspot_max_requests": 2,
      "performance_hotspot_window_seconds": 60,
      "modern_cli_tool_max_requests": 5,
      "modern_cli_tool_window_seconds": 120,
      "python_auto_fixer_max_requests": 3,
      "python_auto_fixer_window_seconds": 60,
      "zen_continuation_max_requests": 3,
      "zen_continuation_window_seconds": 60
    },
    "file_tools": [
      "Write",
      "Edit",
      "MultiEdit",
      "write_to_file",
      "apply_diff",
      "insert_content"
    ],
    "high_priority_tools": [
      "Task",
      "Bash",
      "Grep",
      "Edit",
      "MultiEdit",
      "TodoWrite"
    ],
    "debug_patterns": [
      "grep",
      "rg",
      "find",
      "fd",
      "trace",
      "strace",
      "gdb",
      "debug",
      "log",
      "error",
      "crash",
      "fail"
    ],
    "security_patterns": [
      "auth",
      "password",
      "token",
      "secret",
      "key",
      "security",
      "vuln",
      "exploit",
      "inject",
      "xss",
      "sql",
      "csrf"
    ],
    "git_patterns": [
      "git diff",
      "git status",
      "git log",
      "git add",
      "git commit"
    ],
    "performance_patterns": [
      "benchmark",
      "profile",
      "perf",
      "time",
      "memory",
      "cpu",
      "optimize",
      "performance"
    ],
    "test_patterns": [
      "test",
      "spec",
      "pytest",
      "jest",
      "unittest",
      "_test",
      "tests/"
    ],
    "architecture_patterns": [
      "design",
      "architect",
      "pattern",
      "structure",
      "framework",
      "library"
    ],
    "trace_patterns": [
      "function",
      "method",
      "class",
      "import",
      "dependency",
      "call",
      "invoke"
    ],
    "code_extensions": [
      ".py",
      ".js",
      ".ts",
      ".java",
      ".cpp",
      ".c",
      ".go",
      ".rs",
      ".php",
      ".rb"
    ],
    "web_frameworks": [
      "flask",
      "django",
      "fastapi",
      "express",
      "react",
      "vue",
      "angular"
    ],
    "key_frameworks": [
      "flask",
      "django",
      "fastapi",
      "pytest",
      "jest",
      "react",
      "vue"
    ],
    "key_dependencies": [
      "flask",
      "django",
      "fastapi",
      "requests",
      "pandas",
      "numpy",
      "react",
      "vue",
      "angular",
      "express",
      "pytest",
      "jest"
    ],
    "modern_cli_replacements": {
      "grep": {
        "new_tool": "rg",
        "reason": "ripgrep is 10x faster with better defaults and colored output"
      },
      "find": {
        "new_tool": "fd",
        "reason": "fd is faster with intuitive syntax and respects .gitignore"
      },
      "ls": {
        "new_tool": "lsd",
        "reason": "lsd provides beautiful colored output with icons"
      },
      "sed": {
        "new_tool": "sd",
        "reason": "sd has simpler regex syntax and better error messages"
      },
      "du": {
        "new_tool": "dust",
        "reason": "dust shows disk usage with visual tree and faster scanning"
      },
      "df": {
        "new_tool": "duf",
        "reason": "duf displays disk usage with colors and human-readable format"
      },
      "ps": {
        "new_tool": "procs",
        "reason": "procs shows processes with colors and additional info"
      },
      "curl": {
        "new_tool": "xh",
        "reason": "xh has simpler syntax and JSON support built-in"
      },
      "dig": {
        "new_tool": "dog",
        "reason": "dog provides colored output and modern DNS lookups"
      },
      "diff": {
        "new_tool": "delta",
        "reason": "delta shows beautiful side-by-side diffs with syntax highlighting"
      }
    },
    "skip_patterns": [
      "hook_handlers",
      "hook_tools",
      "test_",
      "_test.py",
      "__pycache__"
    ],
    "severity_indicators": {
      "critical_patterns": [
        "CRITICAL:",
        "security",
        "secaudit",
        "hardcoded",
        "credentials",
        "injection",
        "vulnerability"
      ],
      "high_patterns": [
        "debug",
        "performance",
        "O(n²)",
        "O(n³)",
        "nested loop",
        "sync I/O",
        "architecture",
        "violation"
      ]
    },
    "risk_scoring": {
      "anti_pattern_severity_weights": {
        "CRITICAL": 0.3,
        "HIGH": 0.2,
        "MEDIUM": 0.1,
        "LOW": 0.05
      },
      "performance_risk_weights": {
        "critical": 0.4,
        "high": 0.3,
        "medium": 0.2,
        "low": 0.1
      },
      "error_context_weight": 0.2,
      "no_venv_weight": 0.1
    },
    "agent_keyword_patterns": {
      "backend": "\\b(api|server|database|backend|rest|graphql|microservice|endpoint)\\b",
      "frontend": "\\b(ui|frontend|react|vue|angular|component|styling|css|tailwind|scss)\\b",
      "testing": "\\b(test|testing|unit|integration|e2e|pytest|jest|cypress|spec)\\b",
      "devops": "\\b(deploy|docker|kubernetes|ci/cd|pipeline|build|infrastructure)\\b",
      "database": "\\b(database|sql|postgres|mysql|mongodb|migration|schema|query)\\b",
      "security": "\\b(security|auth|oauth|jwt|encryption|vulnerability|audit)\\b",
      "mobile": "\\b(mobile|ios|android|react native|flutter|app)\\b",
      "documentation": "\\b(doc|documentation|readme|guide|manual|wiki)\\b",
      "performance": "\\b(performance|optimize|speed|benchmark|profiling|memory)\\b",
      "refactor": "\\b(refactor|clean|improve|restructure|organize|simplify)\\b"
    },
    "default_agent_fallback": [
      "project-orchestrator.md - Complex multi-phase projects",
      "project-planner.md - Comprehensive project planning",
      "task-dispatch-director.md - Task coordination"
    ],
    "messages": {
      "zen_continuation_available": "🔗 ZEN CONTINUATION AVAILABLE: Use continuation_id='{continuation_id}' with mcp__zen__* tools for context continuity",
      "zen_workflow_start": "🚀 ZEN WORKFLOW MUST USE: Start with mcp__zen__* tools for enhanced analysis (200k token allowance + expert validation)",
      "modern_cli_error": "⚡💥 YOU MUST USE {new_tool} INSTEAD OF {old_tool}! 🚫❌",
      "todo_write_error": "🔥⚡ VERY IMPORTANT: YOU ABSOLUTELY **MUST** HIRE AN AGENT **OR AGENTS FOR INDEPENDENT PARALLEL/BATCH TASK ITEMS** TO COMPLETE THIS CORRECTLY. PARALLELIZE HIRES (PER CLAUDE.md PATTERN_CONTRACT LAWS D2-D6)!!! 💥🚫",
      "memory_notification": "📝 RELEVANT MEMORIES: Found {memory_count} related memories (max relevance: {highest_relevance:.2f}) - consider using mcp__zen tools for enhanced context",
      "anti_pattern_critical": "🚨 CRITICAL ANTI-PATTERNS DETECTED in {file_path}:",
      "anti_pattern_blocked": "🚫 File operation blocked due to {pattern_count} critical security/architecture violations.\nReview and fix these issues before proceeding.",
      "performance_hotspots": "⚡ PERFORMANCE HOTSPOTS DETECTED in {file_path}:\n📊 Risk Score: {risk_score} ({risk_level})\n🔥 Issues: {issues}\n💡 Consider using mcp__zen__analyze for optimization recommendations"
    },
    "debug_log_path": "/tmp/posttooluse_debug.log"
  }
}