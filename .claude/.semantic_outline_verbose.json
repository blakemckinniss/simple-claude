{
  ".claude/.semantic_outline_verbose.json": {
    "description": "JSON config",
    "keys": [
      ".claude/.semantic_outline_verbose.json",
      ".claude/hooks/hook_handler.py",
      ".claude/hooks/hook_handlers/Notification.py",
      ".claude/hooks/hook_handlers/PostToolUse.py",
      ".claude/hooks/hook_handlers/PreCompact.py",
      ".claude/hooks/hook_handlers/PreToolUse.py",
      ".claude/hooks/hook_handlers/SessionStart.py",
      ".claude/hooks/hook_handlers/Stop.py",
      ".claude/hooks/hook_handlers/SubagentStop.py",
      ".claude/hooks/hook_handlers/UserPromptSubmit.py"
    ]
  },
  ".claude/docs/exemption-mechanism.md": {
    "description": "# PreToolUse Hook Exemption Mechanism",
    "docstring": "# PreToolUse Hook Exemption Mechanism"
  },
  ".claude/exemptions.json": {
    "description": "JSON config",
    "keys": [
      "global_exemptions",
      "file_exemptions",
      "justifications"
    ]
  },
  ".claude/file_blocker_config.json": {
    "description": "JSON config",
    "keys": [
      "master_block_enabled",
      "rules",
      "custom_rules"
    ]
  },
  ".claude/hooks/hook_handler.py": {
    "functions": [
      "load_handler(hook_event_name)",
      "main()"
    ],
    "classes": [],
    "docstring": "",
    "imports": [
      "importlib.util",
      "json",
      "os",
      "sys",
      "hook_logger"
    ],
    "todos": [],
    "complexity": 12,
    "function_calls": {
      "load_handler": [
        "join",
        "module_from_spec",
        "abspath",
        "spec_from_file_location",
        "exec_module",
        "exists",
        "dirname"
      ],
      "main": [
        "handle",
        "exit",
        "hasattr",
        "print",
        "log_hook_call",
        "load",
        "get",
        "load_handler"
      ]
    },
    "type_hints": {},
    "metrics": {
      "lines_of_code": 67,
      "comment_ratio": 0.149,
      "avg_line_length": 27.6,
      "is_test_file": false
    },
    "description": "Defines 0 classes and 2 functions"
  },
  ".claude/hooks/hook_handlers/Notification.py": {
    "functions": [
      "handle(data)"
    ],
    "classes": [],
    "docstring": "Generic Notification hook handler.\nThis hook is called when Claude sends a notification.",
    "imports": [
      "json",
      "sys",
      "typing"
    ],
    "todos": [],
    "complexity": 2,
    "function_calls": {
      "handle": [
        "print",
        "exit",
        "get"
      ]
    },
    "type_hints": {
      "handle": {
        "args": {
          "data": "Dict[str, Any]"
        },
        "return": "None"
      }
    },
    "metrics": {
      "lines_of_code": 20,
      "comment_ratio": 0.289,
      "avg_line_length": 27.8,
      "is_test_file": false
    },
    "description": "Defines 0 classes and 1 functions"
  },
  ".claude/hooks/hook_handlers/PostToolUse.py": {
    "functions": [
      "extract_continuation_id(tool_name, tool_input, tool_response)",
      "detect_zen_usage_patterns(tool_name, tool_input, session_id, cwd)",
      "generate_zen_prompt_template(tool_name, recommendations, has_continuation, continuation_id)",
      "store_continuation_id(session_id, continuation_id)",
      "sanitize_input(input_data)",
      "should_trigger_python_fixer(tool_name, tool_input)",
      "extract_todo_content(tool_input)",
      "get_agent_info(agents_dir)",
      "analyze_bash_command(command)",
      "analyze_and_recommend_agents(todo_content, cwd)",
      "run_python_auto_fixer(tool_name, tool_input, cwd)",
      "handle(input_data)",
      "main()"
    ],
    "classes": [],
    "docstring": "PostToolUse hook handler compliant with HOOK_CONTRACT.md.\nThis hook is called after Claude uses a tool.\nProvides CLI recommendations for Bash commands and automatically fixes Python files using python_auto_fixer.py.",
    "imports": [
      "json",
      "sys",
      "os",
      "re",
      "datetime"
    ],
    "todos": [],
    "complexity": 143,
    "function_calls": {
      "extract_continuation_id": [
        "len",
        "loads",
        "get",
        "startswith",
        "isinstance"
      ],
      "detect_zen_usage_patterns": [
        "lower",
        "len",
        "join",
        "append",
        "str",
        "any",
        "add",
        "set",
        "endswith",
        "get"
      ],
      "generate_zen_prompt_template": [
        "join",
        "enumerate",
        "append"
      ],
      "store_continuation_id": [
        "set_continuation_id"
      ],
      "sanitize_input": [
        "print",
        "get"
      ]
    },
    "type_hints": {
      "extract_continuation_id": {
        "args": {
          "tool_name": "str",
          "tool_input": "Dict[str, Any]",
          "tool_response": "Any"
        },
        "return": "str"
      },
      "detect_zen_usage_patterns": {
        "args": {
          "tool_name": "str",
          "tool_input": "Dict[str, Any]",
          "session_id": "str",
          "cwd": "str"
        },
        "return": "List[str]"
      },
      "generate_zen_prompt_template": {
        "args": {
          "tool_name": "str",
          "recommendations": "List[str]",
          "has_continuation": "bool",
          "continuation_id": "str"
        },
        "return": "str"
      },
      "store_continuation_id": {
        "args": {
          "session_id": "str",
          "continuation_id": "str"
        },
        "return": "None"
      },
      "sanitize_input": {
        "args": {
          "input_data": "Dict[str, Any]"
        },
        "return": "bool"
      }
    },
    "performance_hotspots": [
      {
        "type": "high_complexity",
        "function": "extract_continuation_id",
        "complexity": 14,
        "line": 22
      },
      {
        "type": "high_complexity",
        "function": "detect_zen_usage_patterns",
        "complexity": 40,
        "line": 78
      },
      {
        "type": "high_complexity",
        "function": "should_trigger_python_fixer",
        "complexity": 14,
        "line": 278
      }
    ],
    "metrics": {
      "lines_of_code": 466,
      "comment_ratio": 0.125,
      "avg_line_length": 42.5,
      "is_test_file": false
    },
    "description": "Defines 0 classes and 13 functions"
  },
  ".claude/hooks/hook_handlers/PreCompact.py": {
    "functions": [
      "handle(data)"
    ],
    "classes": [],
    "docstring": "Generic PreCompact hook handler.\nThis hook is called before Claude compacts its memory/context.",
    "imports": [
      "json",
      "sys",
      "typing"
    ],
    "todos": [],
    "complexity": 2,
    "function_calls": {
      "handle": [
        "print",
        "exit",
        "get"
      ]
    },
    "type_hints": {
      "handle": {
        "args": {
          "data": "Dict[str, Any]"
        },
        "return": "None"
      }
    },
    "metrics": {
      "lines_of_code": 20,
      "comment_ratio": 0.289,
      "avg_line_length": 27.5,
      "is_test_file": false
    },
    "description": "Defines 0 classes and 1 functions"
  },
  ".claude/hooks/hook_handlers/PreToolUse.py": {
    "functions": [
      "handle(data)",
      "check_file_restrictions(file_path, content)",
      "analyze_ast_patterns(file_path, content)",
      "_calculate_function_complexities(tree)",
      "_count_class_methods(tree)",
      "_analyze_inheritance_depth(tree)",
      "_find_unused_imports(tree, content)",
      "_find_unused_variables(tree)",
      "_analyze_parameter_counts(tree)",
      "_analyze_nested_function_depth(tree)",
      "_analyze_return_complexity(tree)",
      "detect_anti_patterns(file_path, content)"
    ],
    "classes": [
      "ExemptionManager"
    ],
    "docstring": "PreToolUse hook handler with comprehensive anti-pattern detection.\nBlocks file creation that would lead to technical debt or dangerous patterns.\nSupports exemption mechanisms for legitimate exceptions with proper justification.",
    "imports": [
      "ast",
      "json",
      "os",
      "re",
      "sys"
    ],
    "todos": [
      "/FIXME accumulation"
    ],
    "complexity": 162,
    "function_calls": {
      "handle": [
        "check_file_restrictions",
        "print",
        "exit",
        "is_master_block_enabled",
        "FileBlocker",
        "isinstance",
        "get",
        "_is_claude_directory_operation"
      ],
      "check_file_restrictions": [
        "lower",
        "join",
        "basename",
        "block_file_creation_if_restricted",
        "ExemptionManager",
        "abspath",
        "append",
        "print",
        "log_exemption",
        "is_pattern_exempt"
      ],
      "analyze_ast_patterns": [
        "join",
        "_find_unused_variables",
        "_find_unused_imports",
        "_analyze_parameter_counts",
        "append",
        "_analyze_nested_function_depth",
        "items",
        "_analyze_return_complexity",
        "_count_class_methods",
        "parse"
      ],
      "_calculate_function_complexities": [
        "walk",
        "len",
        "isinstance"
      ],
      "_count_class_methods": [
        "walk",
        "isinstance"
      ]
    },
    "type_hints": {
      "handle": {
        "args": {
          "data": "Dict[str, Any]"
        },
        "return": "None"
      },
      "check_file_restrictions": {
        "args": {
          "file_path": "str",
          "content": "str"
        },
        "return": "None"
      },
      "analyze_ast_patterns": {
        "args": {
          "file_path": "str",
          "content": "str"
        },
        "return": "List[Tuple[str, str, str]]"
      },
      "_calculate_function_complexities": {
        "args": {
          "tree": "ast.AST"
        },
        "return": "Dict[str, int]"
      },
      "_count_class_methods": {
        "args": {
          "tree": "ast.AST"
        },
        "return": "Dict[str, int]"
      }
    },
    "performance_hotspots": [
      {
        "type": "high_complexity",
        "function": "handle",
        "complexity": 24,
        "line": 47
      },
      {
        "type": "high_complexity",
        "function": "check_file_restrictions",
        "complexity": 16,
        "line": 285
      },
      {
        "type": "high_complexity",
        "function": "analyze_ast_patterns",
        "complexity": 19,
        "line": 371
      }
    ],
    "metrics": {
      "lines_of_code": 514,
      "comment_ratio": 0.103,
      "avg_line_length": 41.3,
      "is_test_file": false
    },
    "description": "Defines 1 classes and 12 functions"
  },
  ".claude/hooks/hook_handlers/SessionStart.py": {
    "functions": [
      "handle(input_data)"
    ],
    "classes": [],
    "docstring": "SessionStart hook handler for initializing global continuation tracking.\nEnsures thread-safe initialization of session state and outputs initialization context for Claude.",
    "imports": [
      "sys",
      "subprocess",
      "json",
      "uuid",
      "pathlib"
    ],
    "todos": [],
    "complexity": 18,
    "function_calls": {
      "handle": [
        "cleanup_old_sessions",
        "exit",
        "get_all_sessions",
        "generate_session_id",
        "get_session_info",
        "strip",
        "get",
        "len",
        "exists",
        "sort"
      ]
    },
    "type_hints": {
      "handle": {
        "args": {
          "input_data": "Dict[str, Any]"
        },
        "return": "None"
      }
    },
    "performance_hotspots": [
      {
        "type": "high_complexity",
        "function": "handle",
        "complexity": 14,
        "line": 18
      }
    ],
    "metrics": {
      "lines_of_code": 120,
      "comment_ratio": 0.123,
      "avg_line_length": 37.3,
      "is_test_file": false
    },
    "description": "Defines 0 classes and 1 functions"
  },
  ".claude/hooks/hook_handlers/Stop.py": {
    "functions": [
      "calculate_session_duration(session_info)",
      "archive_session_data(session_id, session_info, archive_dir)",
      "cleanup_session_state(session_id, archive_session)",
      "cleanup_old_archives(archive_dir, retention_days)",
      "log_session_end(session_id, stop_reason, cleanup_stats)",
      "handle(data)",
      "main()"
    ],
    "classes": [],
    "docstring": "Stop hook handler with session cleanup and archival logic.\nThis hook is called when Claude stops processing.",
    "imports": [
      "json",
      "sys",
      "threading",
      "datetime",
      "pathlib"
    ],
    "todos": [],
    "complexity": 28,
    "function_calls": {
      "calculate_session_duration": [
        "total_seconds",
        "fromisoformat",
        "now",
        "get"
      ],
      "archive_session_data": [
        "strftime",
        "isoformat",
        "open",
        "replace",
        "now",
        "dump",
        "mkdir",
        "with_suffix"
      ],
      "cleanup_session_state": [
        "calculate_session_duration",
        "str",
        "isoformat",
        "archive_session_data",
        "get_session_info",
        "now",
        "Path"
      ],
      "cleanup_old_archives": [
        "glob",
        "stat",
        "exists",
        "fromtimestamp",
        "now",
        "unlink",
        "timedelta"
      ],
      "log_session_end": [
        "log_event"
      ]
    },
    "type_hints": {
      "calculate_session_duration": {
        "args": {
          "session_info": "Dict[str, Any]"
        },
        "return": "Optional[float]"
      },
      "archive_session_data": {
        "args": {
          "session_id": "str",
          "session_info": "Dict[str, Any]",
          "archive_dir": "Path"
        },
        "return": "bool"
      },
      "cleanup_session_state": {
        "args": {
          "session_id": "str",
          "archive_session": "bool"
        },
        "return": "Dict[str, Any]"
      },
      "cleanup_old_archives": {
        "args": {
          "archive_dir": "Path",
          "retention_days": "int"
        },
        "return": "None"
      },
      "log_session_end": {
        "args": {
          "session_id": "str",
          "stop_reason": "str",
          "cleanup_stats": "Dict[str, Any]"
        },
        "return": "None"
      }
    },
    "performance_hotspots": [
      {
        "type": "high_complexity",
        "function": "handle",
        "complexity": 13,
        "line": 179
      }
    ],
    "metrics": {
      "lines_of_code": 191,
      "comment_ratio": 0.126,
      "avg_line_length": 35.0,
      "is_test_file": false
    },
    "description": "Defines 0 classes and 7 functions"
  },
  ".claude/hooks/hook_handlers/SubagentStop.py": {
    "functions": [
      "handle(data)"
    ],
    "classes": [],
    "docstring": "Generic SubagentStop hook handler.\nThis hook is called when a subagent stops processing.",
    "imports": [
      "json",
      "sys",
      "typing"
    ],
    "todos": [],
    "complexity": 2,
    "function_calls": {
      "handle": [
        "print",
        "exit",
        "get"
      ]
    },
    "type_hints": {
      "handle": {
        "args": {
          "data": "Dict[str, Any]"
        },
        "return": "None"
      }
    },
    "metrics": {
      "lines_of_code": 21,
      "comment_ratio": 0.282,
      "avg_line_length": 28.6,
      "is_test_file": false
    },
    "description": "Defines 0 classes and 1 functions"
  },
  ".claude/hooks/hook_handlers/UserPromptSubmit.py": {
    "functions": [
      "load_constants()",
      "load_env()",
      "extract_imports(tree)",
      "extract_todos(source)",
      "extract_function_calls(tree)",
      "_extract_call_name(func_node)",
      "detect_performance_hotspots(tree, source)",
      "_get_loop_depth(node, current_depth)",
      "calculate_context_depth(prompt)",
      "detect_code_quality_issues(filepath, content)",
      "aggregate_cross_file_patterns(verbose_outline)",
      "extract_test_metrics(test_files)",
      "synthesize_tool_outputs(cache_key, output)",
      "extract_type_hints(tree)",
      "_annotation_to_string(annotation)",
      "calculate_complexity(tree)",
      "detect_performance_hotspots_old(filepath, tree, source)",
      "summarize_python_file(filepath)",
      "summarize_text_file(filepath)",
      "summarize_json_file(filepath)",
      "summarize_file(filepath)",
      "extract_keywords(prompt)",
      "score_file_relevance(prompt, filepath, summary)",
      "filter_relevant_files(prompt, outline, top_k)",
      "generate_outline(file_list)",
      "get_git_context(keywords)",
      "get_error_context()",
      "get_project_config()",
      "get_project_documentation()",
      "get_test_context()",
      "get_environment_context()",
      "calculate_file_metrics(filepath, source)",
      "bootstrap_summary(json_path)",
      "get_agent_info(agents_dir)",
      "build_import_graph()",
      "format_outline(outline)",
      "call_gemini(user_prompt, verbose_outline, mcp_servers, agents, session_id, git_context, error_context, project_config, project_docs, test_context, env_context, import_graph, cross_file_patterns, test_metrics, context_depth)",
      "get_current_continuation_id(session_id)",
      "set_continuation_id(session_id, continuation_id)",
      "has_active_continuation(session_id)",
      "handle(data)"
    ],
    "classes": [],
    "docstring": "",
    "imports": [
      "os",
      "sys",
      "ast",
      "json",
      "requests"
    ],
    "todos": [],
    "complexity": 369,
    "function_calls": {
      "load_constants": [
        "RuntimeError",
        "open",
        "Path",
        "load"
      ],
      "load_env": [
        "open",
        "exists",
        "Path",
        "startswith",
        "strip",
        "split"
      ],
      "extract_imports": [
        "walk",
        "append",
        "isinstance",
        "extend"
      ],
      "extract_todos": [
        "findall"
      ],
      "extract_function_calls": [
        "append",
        "_extract_call_name",
        "set",
        "list",
        "walk",
        "isinstance"
      ]
    },
    "type_hints": {
      "load_constants": {
        "args": {},
        "return": "Dict[str, Any]"
      },
      "detect_performance_hotspots_old": {
        "args": {
          "filepath": "str",
          "tree": "ast.AST",
          "source": "str"
        },
        "return": "Dict[str, Any]"
      },
      "extract_keywords": {
        "args": {
          "prompt": "str"
        },
        "return": "List[str]"
      },
      "score_file_relevance": {
        "args": {
          "prompt": "str",
          "filepath": "str",
          "summary": "dict"
        },
        "return": "float"
      },
      "filter_relevant_files": {
        "args": {
          "prompt": "str",
          "outline": "dict",
          "top_k": "int"
        },
        "return": "dict"
      }
    },
    "performance_hotspots": [
      {
        "type": "high_complexity",
        "function": "aggregate_cross_file_patterns",
        "complexity": 14,
        "line": 224
      },
      {
        "type": "high_complexity",
        "function": "extract_test_metrics",
        "complexity": 12,
        "line": 264
      },
      {
        "type": "high_complexity",
        "function": "detect_performance_hotspots_old",
        "complexity": 73,
        "line": 382
      }
    ],
    "quality_issues": [
      {
        "type": "too_many_parameters",
        "name": "call_gemini",
        "count": 15,
        "suggestion": "Consider using configuration object or builder pattern"
      }
    ],
    "metrics": {
      "lines_of_code": 1275,
      "comment_ratio": 0.118,
      "avg_line_length": 41.1,
      "is_test_file": true
    },
    "description": "Defines 0 classes and 41 functions"
  },
  ".claude/hooks/hook_handlers/performance_test.py": {
    "functions": [
      "test_hook_performance(iterations)"
    ],
    "classes": [],
    "docstring": "Performance test for UserPromptSubmit hook optimization.",
    "imports": [
      "time",
      "json",
      "subprocess",
      "sys",
      "os"
    ],
    "todos": [],
    "complexity": 5,
    "function_calls": {
      "test_hook_performance": [
        "time",
        "len",
        "append",
        "max",
        "range",
        "min",
        "print",
        "getcwd",
        "sum",
        "dumps"
      ]
    },
    "type_hints": {},
    "metrics": {
      "lines_of_code": 50,
      "comment_ratio": 0.06,
      "avg_line_length": 28.4,
      "is_test_file": true
    },
    "description": "Defines 0 classes and 1 functions"
  },
  ".claude/hooks/hook_logger.py": {
    "functions": [],
    "classes": [
      "UserPromptLogger"
    ],
    "docstring": "Simplified logger for UserPromptSubmit hooks.\nLogs key events with minimal overhead and automatic cleanup.",
    "imports": [
      "json",
      "uuid",
      "datetime",
      "pathlib",
      "typing"
    ],
    "todos": [],
    "complexity": 9,
    "function_calls": {
      "__init__": [
        "str",
        "Path",
        "defaultdict",
        "uuid4",
        "mkdir"
      ],
      "_cleanup_old_logs": [
        "glob",
        "stat",
        "fromtimestamp",
        "now",
        "unlink",
        "timedelta",
        "is_file"
      ],
      "_get_log_filename": [
        "now",
        "strftime"
      ],
      "log_event": [
        "_cleanup_old_logs",
        "write",
        "isoformat",
        "open",
        "_get_log_filename",
        "now",
        "dumps"
      ],
      "log_gemini_request": [
        "log_event",
        "len"
      ]
    },
    "type_hints": {
      "__init__": {
        "args": {
          "base_dir": "str"
        },
        "return": null
      },
      "_get_log_filename": {
        "args": {},
        "return": "Path"
      },
      "log_event": {
        "args": {
          "event_data": "Dict[str, Any]"
        },
        "return": null
      },
      "log_gemini_request": {
        "args": {
          "user_prompt": "str",
          "request_payload": "Dict[str, Any]"
        },
        "return": null
      },
      "log_gemini_response": {
        "args": {
          "response_data": "Dict[str, Any]",
          "success": "bool"
        },
        "return": null
      }
    },
    "metrics": {
      "lines_of_code": 92,
      "comment_ratio": 0.079,
      "avg_line_length": 36.2,
      "is_test_file": false
    },
    "description": "Defines 1 classes and 0 functions"
  },
  ".claude/hooks/hook_tools/anti_patterns_detector.py": {
    "functions": [],
    "classes": [
      "Severity",
      "AntiPattern",
      "AntiPatternDetector"
    ],
    "docstring": "Anti-patterns and Technical Debt Detection Module\nProvides comprehensive detection of code anti-patterns for file creation blocking.",
    "imports": [
      "re",
      "os",
      "pathlib",
      "typing",
      "dataclasses"
    ],
    "todos": [],
    "complexity": 33,
    "function_calls": {
      "__init__": [
        "_initialize_patterns"
      ],
      "_initialize_patterns": [
        "_get_architecture_patterns",
        "_get_code_quality_patterns",
        "_get_file_structure_patterns",
        "_get_security_patterns"
      ],
      "_get_file_structure_patterns": [
        "len",
        "splitlines",
        "Path"
      ],
      "_get_security_patterns": [],
      "_get_architecture_patterns": [
        "_detect_anemic_model"
      ]
    },
    "type_hints": {
      "_initialize_patterns": {
        "args": {},
        "return": "Dict[str, List[Dict[str, Any]]]"
      },
      "_get_file_structure_patterns": {
        "args": {},
        "return": "List[Dict[str, Any]]"
      },
      "_get_security_patterns": {
        "args": {},
        "return": "List[Dict[str, Any]]"
      },
      "_get_architecture_patterns": {
        "args": {},
        "return": "List[Dict[str, Any]]"
      },
      "_get_code_quality_patterns": {
        "args": {},
        "return": "List[Dict[str, Any]]"
      }
    },
    "performance_hotspots": [
      {
        "type": "nested_loops",
        "function": "detect_anti_patterns",
        "depth": 2,
        "line": 361,
        "complexity_estimate": "O(n^2)"
      }
    ],
    "metrics": {
      "lines_of_code": 455,
      "comment_ratio": 0.036,
      "avg_line_length": 42.1,
      "is_test_file": false
    },
    "description": "Defines 3 classes and 0 functions"
  },
  ".claude/hooks/hook_tools/continuation_helpers.py": {
    "functions": [
      "get_continuation_id(session_id)",
      "set_continuation_id(session_id, continuation_id)",
      "has_continuation(session_id)",
      "format_continuation_context(session_id)",
      "extract_and_store_continuation(session_id, tool_name, tool_output)"
    ],
    "classes": [],
    "docstring": "Simple continuation tracking helpers for Claude hooks.\nProvides easy-to-use functions for continuation management.",
    "imports": [
      "typing",
      "state_manager"
    ],
    "todos": [],
    "complexity": 14,
    "function_calls": {
      "get_continuation_id": [
        "get_continuation_id"
      ],
      "set_continuation_id": [
        "set_continuation_id"
      ],
      "has_continuation": [
        "has_continuation"
      ],
      "format_continuation_context": [
        "get_continuation_id"
      ],
      "extract_and_store_continuation": [
        "startswith",
        "isinstance",
        "set_continuation_id",
        "get"
      ]
    },
    "type_hints": {
      "get_continuation_id": {
        "args": {
          "session_id": "str"
        },
        "return": "str"
      },
      "set_continuation_id": {
        "args": {
          "session_id": "str",
          "continuation_id": "str"
        },
        "return": "None"
      },
      "has_continuation": {
        "args": {
          "session_id": "str"
        },
        "return": "bool"
      },
      "format_continuation_context": {
        "args": {
          "session_id": "str"
        },
        "return": "str"
      },
      "extract_and_store_continuation": {
        "args": {
          "session_id": "str",
          "tool_name": "str",
          "tool_output": "dict"
        },
        "return": "bool"
      }
    },
    "metrics": {
      "lines_of_code": 78,
      "comment_ratio": 0.028,
      "avg_line_length": 27.3,
      "is_test_file": false
    },
    "description": "Defines 0 classes and 5 functions"
  },
  ".claude/hooks/hook_tools/file_blocker.py": {
    "functions": [
      "is_file_blocked(file_path)",
      "check_file_creation_simple(file_path)",
      "block_file_creation_if_restricted(file_path)",
      "enable_master_block(save_to_config)",
      "disable_master_block(save_to_config)",
      "get_master_block_status()",
      "create_example_config_file()",
      "load_blocking_rules()",
      "test_file_path(file_path, verbose)"
    ],
    "classes": [
      "BlockingResult",
      "BlockingRule",
      "FileBlockerConfig",
      "FileBlocker"
    ],
    "docstring": "File Blocker Configuration System for Claude Hooks Framework.\n\nProvides a flexible, configuration-driven system for blocking file creation\nbased on extensions and directory patterns. Integrates with the existing\nexemption system from PreToolUse.py.",
    "imports": [
      "os",
      "json",
      "sys",
      "pathlib",
      "typing"
    ],
    "todos": [],
    "complexity": 69,
    "function_calls": {
      "is_file_blocked": [
        "FileBlocker",
        "is_blocked"
      ],
      "check_file_creation_simple": [
        "FileBlocker",
        "check_file_creation"
      ],
      "block_file_creation_if_restricted": [
        "FileBlocker",
        "check_file_creation"
      ],
      "enable_master_block": [
        "_save_master_block_setting"
      ],
      "disable_master_block": [
        "_save_master_block_setting"
      ]
    },
    "type_hints": {
      "is_file_blocked": {
        "args": {
          "file_path": "str"
        },
        "return": "tuple[bool, str]"
      },
      "check_file_creation_simple": {
        "args": {
          "file_path": "str"
        },
        "return": "bool"
      },
      "block_file_creation_if_restricted": {
        "args": {
          "file_path": "str"
        },
        "return": null
      },
      "enable_master_block": {
        "args": {
          "save_to_config": "bool"
        },
        "return": null
      },
      "disable_master_block": {
        "args": {
          "save_to_config": "bool"
        },
        "return": null
      }
    },
    "metrics": {
      "lines_of_code": 502,
      "comment_ratio": 0.062,
      "avg_line_length": 37.0,
      "is_test_file": false
    },
    "description": "Defines 4 classes and 9 functions"
  },
  ".claude/hooks/hook_tools/python_auto_fixer.py": {
    "functions": [
      "should_process_file(tool_name, tool_input, file_path)",
      "run_auto_fixer(tool_name, tool_input, cwd)"
    ],
    "classes": [
      "FixResult",
      "FixReport",
      "BaseFixer",
      "ColonFixer",
      "PrintFixer",
      "StringFixer",
      "ParenthesesFixer",
      "BooleanFixer",
      "ImportFixer",
      "IndentationFixer",
      "ExceptionFixer",
      "PassFixer",
      "OptimizedPythonFixer"
    ],
    "docstring": "Optimized Python Auto-Fixer - Modular Architecture\nSingle-pass processing with strategy pattern for maintainable code fixing\n\nFeatures:\n- Custom fixers for common Python syntax issues\n- Ruff integration for fast linting and auto-fixing (optional)\n- Black integration for consistent code formatting (optional)\n- docformatter integration for automatic docstring formatting (optional)\n- flynt integration for automatic f-string conversion (optional)\n- Project configuration auto-detection (.ruff.toml, pyproject.toml)\n- Graceful fallback to autopep8 if modern tools not available\n- Performance-focused with proper error handling and logging\n- Optimal tool execution order for best results",
    "imports": [
      "os",
      "re",
      "sys",
      "time",
      "abc"
    ],
    "todos": [],
    "complexity": 149,
    "function_calls": {
      "should_process_file": [
        "any",
        "endswith",
        "lower",
        "str"
      ],
      "run_auto_fixer": [
        "join",
        "append",
        "isabs",
        "fix_file",
        "OptimizedPythonFixer",
        "exists",
        "_log",
        "isinstance",
        "should_process_file"
      ],
      "__init__": [
        "_check_external_tools",
        "_initialize_fixers"
      ],
      "_compile_patterns": [
        "compile"
      ],
      "can_fix_line": [
        "strip",
        "endswith"
      ]
    },
    "type_hints": {
      "should_process_file": {
        "args": {
          "tool_name": "str",
          "tool_input": "dict",
          "file_path": "str"
        },
        "return": "bool"
      },
      "run_auto_fixer": {
        "args": {
          "tool_name": "str",
          "tool_input": "dict",
          "cwd": "str"
        },
        "return": "None"
      },
      "can_fix_line": {
        "args": {
          "line": "str",
          "line_num": "int",
          "context": "Dict"
        },
        "return": "bool"
      },
      "fix_line": {
        "args": {
          "line": "str",
          "line_num": "int",
          "context": "Dict"
        },
        "return": "Tuple[str, bool]"
      },
      "get_dependencies": {
        "args": {},
        "return": "Set[str]"
      }
    },
    "performance_hotspots": [
      {
        "type": "high_complexity",
        "function": "run_auto_fixer",
        "complexity": 14,
        "line": 864
      },
      {
        "type": "nested_loops",
        "function": "_process_single_pass",
        "depth": 2,
        "line": 350,
        "complexity_estimate": "O(n^2)"
      },
      {
        "type": "high_complexity",
        "function": "_check_external_tools",
        "complexity": 11,
        "line": 444
      }
    ],
    "metrics": {
      "lines_of_code": 659,
      "comment_ratio": 0.09,
      "avg_line_length": 39.3,
      "is_test_file": false
    },
    "description": "Defines 13 classes and 2 functions"
  },
  ".claude/hooks/hook_tools/state_manager.py": {
    "functions": [
      "migrate_from_settings_json()"
    ],
    "classes": [
      "StateManager"
    ],
    "docstring": "Thread-safe state manager for Claude hooks continuation tracking.\nManages session state in separate JSON file outside of settings.json schema.",
    "imports": [
      "json",
      "threading",
      "uuid",
      "datetime",
      "pathlib"
    ],
    "todos": [],
    "complexity": 27,
    "function_calls": {
      "migrate_from_settings_json": [
        "exists",
        "Path",
        "print",
        "migrate_from_settings"
      ],
      "__init__": [
        "Path",
        "RLock",
        "_ensure_state_directory"
      ],
      "_ensure_state_directory": [
        "mkdir"
      ],
      "_read_state": [
        "isoformat",
        "open",
        "exists",
        "now",
        "load"
      ],
      "_write_state": [
        "setdefault",
        "isoformat",
        "open",
        "replace",
        "exists",
        "now",
        "dump",
        "unlink",
        "with_suffix"
      ]
    },
    "type_hints": {
      "migrate_from_settings_json": {
        "args": {},
        "return": "None"
      },
      "_ensure_state_directory": {
        "args": {},
        "return": "None"
      },
      "_read_state": {
        "args": {},
        "return": "Dict[str, Any]"
      },
      "_write_state": {
        "args": {
          "state_data": "Dict[str, Any]"
        },
        "return": "None"
      },
      "generate_session_id": {
        "args": {},
        "return": "str"
      }
    },
    "metrics": {
      "lines_of_code": 270,
      "comment_ratio": 0.067,
      "avg_line_length": 34.3,
      "is_test_file": false
    },
    "description": "Defines 1 classes and 1 functions"
  },
  ".claude/hooks/state/sessions.json": {
    "description": "JSON config",
    "keys": [
      "sessions",
      "metadata"
    ]
  },
  ".claude/json/constants.json": {
    "description": "JSON config",
    "keys": [
      "file_paths",
      "file_extensions",
      "environment_variables",
      "api",
      "text_limits",
      "git_commands",
      "yaml_frontmatter",
      "mcp_servers",
      "http_headers",
      "json_structure"
    ]
  },
  ".claude/settings.json": {
    "description": "JSON config",
    "keys": [
      "cleanupPeriodDays",
      "includeCoAuthoredBy",
      "env",
      "enableAllProjectMcpServers",
      "hooks"
    ]
  },
  ".claude/state/sessions.json": {
    "description": "JSON config",
    "keys": [
      "sessions",
      "metadata"
    ]
  },
  ".gitignore": {
    "description": "Skipped unhandled file: .gitignore"
  },
  ".serena/project.yml": {
    "description": "Skipped unhandled file: .serena/project.yml"
  },
  "CLAUDE.md": {
    "description": "CLAUDE.md",
    "docstring": "CLAUDE.md"
  },
  "TERMS_OF_SERVICE.md": {
    "description": "# TERMS OF SERVICE - SIMPLE CLAUDE PROJECT",
    "docstring": "# TERMS OF SERVICE - SIMPLE CLAUDE PROJECT"
  },
  "contracts/AGENT_CONTRACT.md": {
    "description": "# Agent Coordination Contract",
    "docstring": "# Agent Coordination Contract"
  },
  "contracts/CLI_CONTRACT.md": {
    "description": "# External Tool Integration Contract",
    "docstring": "# External Tool Integration Contract"
  },
  "contracts/HOOK_CONTRACT.md": {
    "description": "# Claude Code Hook Handler Contract",
    "docstring": "# Claude Code Hook Handler Contract"
  },
  "contracts/PROMPT_CONTRACT.md": {
    "description": "# PROMPT CONTRACT",
    "docstring": "# PROMPT CONTRACT"
  }
}